Yikes, this one was tough. I think it's safe to say that this project was problaby the most "hacky" project that I've ever done! The code, is (basically) spaghetti code... But then again, I had a very poor understanding of JSON, APIs, and Asynchronous requests and functions until towards the end of July 26th. So, although the file is for July 25, I didn't actually complete it on the 25th...

Future plans:
I want to fork the code tomorrow, so that I can add more functions to a trivia game (same scope as jeopardy). I didn't quite like making the GIF website, considering that I would leak an API key... And that's not a very good cybersecurity standpoint. Because I didn't want to go through more research for finding how to make client API keys, I decided I was going to stiick to an open source database in which I can go and access all the questions nicely, (without repercussions if someone took my API key, which would be highly unlikely.... But still)!

I think that also, considering that (most) GIFs will contain considerably larger quantities of data than plaintext, the amount of time delay would be greater, so before I jump into the deep end of data-transport, I want to learn with smaller chunks first, and then move on! This is because the database that I chose, opentdb.com has MANY different options, and it is much more customizeable than the jeopardy API that we just used. Therefore, with this more structured and easy-to-use database, I'll have more fun reading the documentation, and transporting larger amounts of data at once! (more plaintext, which I will eventually parse to JSON).

More info:
The current approach that I went within my script.js is as follows:

I chose a few categories, astronomy, entineering, olympics, stuff like that... With each of these categories, I labeled it with an id.

So for example, since astronomy is furthest left, in a 2d array, it would be:
[
[[0-0],[1-0],[2-0],[3-0],[4-0]],
[[0-1],[1-1],[2-1],[3-1],[4-1]],
[[0-2],[1-2],[2-2],[3-2],[4-2]],
[[0-3],[1-3],[2-3],[3-3],[4-3]],
[[0-4],[1-4],[2-4],[3-4],[4-4]]
]

Please note that the above 2d array corresponds to the questions to the **ID** of the HTML element. So for example, [0-0] would have a question for astronomy (first column) , and 100 points (first row). It has similar resemblance to the structure of a cartesian grid;
It's just flipped...

With that, I decided to add the numbers and added chunks. However, you might notice something peculiar about the grid, for each cell inside an outer cell (for each [X-X] value), it is demanding a VERY specific question. Basically, I'm asking the API:

"One Astronomy question that's worth 300 points please!",
for example.

And because of this, I'm demanding some VERY specific parameters. I have a new idea now.... With the new opentdb API that I'll be using, I want to grab as many questions as possible, put it in a single request, and filter through using more code. So, instead of asking something specific, I'll ask...

"A bunch of astronomy questions please!"

And in my code, I'll search for astronomy questions worth 300 points (for example).*

*Cohort 22: Thank you Reid, Caitlin and Allison for this idea!


After a countless amount of time of fooling around, I started to give up, and my code became very, very hacky. For the UX, and card flip, I depended on flipping the entire board, and then (practically) instantly re-flipping the selected card. AND THEN, if you click the card again, it would go through an if statement, and then flip only the card you selected, while ignoring all the other cards. I couldn't think of anything better..

Also, to prevent people from "farming" points by consistently answering the same question correctly over-and-over, I decided to just set the a_card.querySelector("#points") = 0

It will still add it! I didn't want to make a check because I was too lazy, my brain is fried, I did too much thinking for today!
But anything added by 0 is itself!

:P :D :)

Hopefully this helps, and if you made it this far, I applaud you!
